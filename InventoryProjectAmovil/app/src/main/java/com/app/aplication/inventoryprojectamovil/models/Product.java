package com.app.aplication.inventoryprojectamovil.models;

import com.app.aplication.inventoryprojectamovil.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PRODUCT".
 */
public class Product {

    private Long id;
    private String code;
    private String code_bar;
    private String name;
    private Integer units_product;
    private Long idInventory;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Inventory inventory;
    private Long inventory__resolvedKey;


    public Product() {
    }

    public Product(Long id) {
        this.id = id;
    }

    public Product(Long id, String code, String code_bar, String name, Integer units_product, Long idInventory) {
        this.id = id;
        this.code = code;
        this.code_bar = code_bar;
        this.name = name;
        this.units_product = units_product;
        this.idInventory = idInventory;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getCode_bar() {
        return code_bar;
    }

    public void setCode_bar(String code_bar) {
        this.code_bar = code_bar;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getUnits_product() {
        return units_product;
    }

    public void setUnits_product(Integer units_product) {
        this.units_product = units_product;
    }

    public Long getIdInventory() {
        return idInventory;
    }

    public void setIdInventory(Long idInventory) {
        this.idInventory = idInventory;
    }

    /** To-one relationship, resolved on first access. */
    public Inventory getInventory() {
        Long __key = this.idInventory;
        if (inventory__resolvedKey == null || !inventory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InventoryDao targetDao = daoSession.getInventoryDao();
            Inventory inventoryNew = targetDao.load(__key);
            synchronized (this) {
                inventory = inventoryNew;
            	inventory__resolvedKey = __key;
            }
        }
        return inventory;
    }

    public void setInventory(Inventory inventory) {
        synchronized (this) {
            this.inventory = inventory;
            idInventory = inventory == null ? null : inventory.getId();
            inventory__resolvedKey = idInventory;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    @Override
    public String toString() {
        return "Product{" +
                "id=" + id +
                ", code='" + code + '\'' +
                ", code_bar='" + code_bar + '\'' +
                ", name='" + name + '\'' +
                ", units_product=" + units_product +
                ", idInventory=" + idInventory +
                '}';
    }
}
